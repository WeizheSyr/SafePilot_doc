Navigation Problem
~~~~~~~~~~~~~~~~~~~~

In this case study, we address a navigation problem that requires the LLM to devise a plan for a driver while adhering to temporal constraints. 

We read the prompt from ``first_prompt_formula.txt`` and instruct the LLM to generate LTL formulas.

The temporal constraints in this problem is `You should have been to C and D before you go to G`. The correct LTL formula is shown below.

.. code ::

   G(!(g) U (c & d))

After manually checking the correctness of the generated specification, we proceed to request the LLM to generate a plan using prompt from ``first_prompt_plan.txt``.

The specific problem is as follows.

.. code::

   (define (problem driver-1)
   (:cities A B C D E F G)
   (:constraints 
   (You should have been to C and D before you go to G))
   (:roads
   (A-B)
   (B-E)
   (E-A)
   (B-C)
   (B-F)
   (F-G)
   )
   (:init
   (A))
   (:goal
   (G))
   )


The figure below shows the cities and roads of the problem.

.. image:: images/5_example/map1.png
   :width: 450 px
   :align: center
   :alt: Navigation problem

The first plan generated by LLM is shown below.

.. code::

   START-PLAN
   1. A -> B 
   2. B -> C 
   3. C -> B 
   4. B -> F 
   5. F -> G 
   END-PLAN

After customizing the verifier (inherited from class ``LTL_verifier``) based on the task, the plan is verified against the specification, and the reasoning is provided as follows.

.. code::

   The plan is invalid according to the steps below.
   1. A -> B 
   2. B -> C 
   3. C -> B 
   4. B -> F 
   5. F -> G 

The reasoning is passed as a new prompt to the LLM to generate a revised plan, which is then verified again. This process continues until a plan that satisfies the specification is obtained or the user-defined iteration limit is reached.

Correct result is shown below.

.. code::

   START-PLAN
   1. A -> B 
   2. B -> C 
   3. C -> B 
   4. B -> A 
   5. A -> E 
   6. E -> D 
   7. D -> E 
   8. E -> A 
   9. A -> B 
   10. B -> F 
   11. F -> G 
   END-PLAN

